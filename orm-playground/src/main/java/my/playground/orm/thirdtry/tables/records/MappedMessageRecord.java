/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables.records;


import my.playground.orm.thirdtry.tables.MappedMessage;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MappedMessageRecord extends UpdatableRecordImpl<MappedMessageRecord> implements Record3<byte[], String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mapped_message.id</code>.
     */
    public void setId(byte[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>mapped_message.id</code>.
     */
    public byte[] getId() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>mapped_message.content</code>.
     */
    public void setContent(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mapped_message.content</code>.
     */
    public String getContent() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mapped_message.email_id</code>.
     */
    public void setEmailId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>mapped_message.email_id</code>.
     */
    public Long getEmailId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<byte[]> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<byte[], String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<byte[], String, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<byte[]> field1() {
        return MappedMessage.MAPPED_MESSAGE.ID;
    }

    @Override
    public Field<String> field2() {
        return MappedMessage.MAPPED_MESSAGE.CONTENT;
    }

    @Override
    public Field<Long> field3() {
        return MappedMessage.MAPPED_MESSAGE.EMAIL_ID;
    }

    @Override
    public byte[] component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getContent();
    }

    @Override
    public Long component3() {
        return getEmailId();
    }

    @Override
    public byte[] value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getContent();
    }

    @Override
    public Long value3() {
        return getEmailId();
    }

    @Override
    public MappedMessageRecord value1(byte[] value) {
        setId(value);
        return this;
    }

    @Override
    public MappedMessageRecord value2(String value) {
        setContent(value);
        return this;
    }

    @Override
    public MappedMessageRecord value3(Long value) {
        setEmailId(value);
        return this;
    }

    @Override
    public MappedMessageRecord values(byte[] value1, String value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MappedMessageRecord
     */
    public MappedMessageRecord() {
        super(MappedMessage.MAPPED_MESSAGE);
    }

    /**
     * Create a detached, initialised MappedMessageRecord
     */
    public MappedMessageRecord(byte[] id, String content, Long emailId) {
        super(MappedMessage.MAPPED_MESSAGE);

        setId(id);
        setContent(content);
        setEmailId(emailId);
    }
}
