/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables;


import my.playground.orm.thirdtry.DefaultSchema;
import my.playground.orm.thirdtry.tables.records.JointableparentSeqRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class JointableparentSeq extends TableImpl<JointableparentSeqRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>JoinTableParent_SEQ</code>
     */
    public static final JointableparentSeq JOINTABLEPARENT_SEQ = new JointableparentSeq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JointableparentSeqRecord> getRecordType() {
        return JointableparentSeqRecord.class;
    }

    /**
     * The column <code>JoinTableParent_SEQ.next_val</code>.
     */
    public final TableField<JointableparentSeqRecord, Long> NEXT_VAL = createField(DSL.name("next_val"), SQLDataType.BIGINT, this, "");

    private JointableparentSeq(Name alias, Table<JointableparentSeqRecord> aliased) {
        this(alias, aliased, null);
    }

    private JointableparentSeq(Name alias, Table<JointableparentSeqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>JoinTableParent_SEQ</code> table reference
     */
    public JointableparentSeq(String alias) {
        this(DSL.name(alias), JOINTABLEPARENT_SEQ);
    }

    /**
     * Create an aliased <code>JoinTableParent_SEQ</code> table reference
     */
    public JointableparentSeq(Name alias) {
        this(alias, JOINTABLEPARENT_SEQ);
    }

    /**
     * Create a <code>JoinTableParent_SEQ</code> table reference
     */
    public JointableparentSeq() {
        this(DSL.name("JoinTableParent_SEQ"), null);
    }

    public <O extends Record> JointableparentSeq(Table<O> child, ForeignKey<O, JointableparentSeqRecord> key) {
        super(child, key, JOINTABLEPARENT_SEQ);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public JointableparentSeq as(String alias) {
        return new JointableparentSeq(DSL.name(alias), this);
    }

    @Override
    public JointableparentSeq as(Name alias) {
        return new JointableparentSeq(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JointableparentSeq rename(String name) {
        return new JointableparentSeq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JointableparentSeq rename(Name name) {
        return new JointableparentSeq(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
