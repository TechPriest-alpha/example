/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables.records;


import my.playground.orm.thirdtry.tables.MappedEmailSubject;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MappedEmailSubjectRecord extends UpdatableRecordImpl<MappedEmailSubjectRecord> implements Record2<String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mapped_email_subject.subject</code>.
     */
    public void setSubject(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>mapped_email_subject.subject</code>.
     */
    public String getSubject() {
        return (String) get(0);
    }

    /**
     * Setter for <code>mapped_email_subject.id</code>.
     */
    public void setId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>mapped_email_subject.id</code>.
     */
    public Long getId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return MappedEmailSubject.MAPPED_EMAIL_SUBJECT.SUBJECT;
    }

    @Override
    public Field<Long> field2() {
        return MappedEmailSubject.MAPPED_EMAIL_SUBJECT.ID;
    }

    @Override
    public String component1() {
        return getSubject();
    }

    @Override
    public Long component2() {
        return getId();
    }

    @Override
    public String value1() {
        return getSubject();
    }

    @Override
    public Long value2() {
        return getId();
    }

    @Override
    public MappedEmailSubjectRecord value1(String value) {
        setSubject(value);
        return this;
    }

    @Override
    public MappedEmailSubjectRecord value2(Long value) {
        setId(value);
        return this;
    }

    @Override
    public MappedEmailSubjectRecord values(String value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MappedEmailSubjectRecord
     */
    public MappedEmailSubjectRecord() {
        super(MappedEmailSubject.MAPPED_EMAIL_SUBJECT);
    }

    /**
     * Create a detached, initialised MappedEmailSubjectRecord
     */
    public MappedEmailSubjectRecord(String subject, Long id) {
        super(MappedEmailSubject.MAPPED_EMAIL_SUBJECT);

        setSubject(subject);
        setId(id);
    }
}
