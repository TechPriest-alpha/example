/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables;


import my.playground.orm.thirdtry.DefaultSchema;
import my.playground.orm.thirdtry.Keys;
import my.playground.orm.thirdtry.tables.records.Ent2Record;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Ent2 extends TableImpl<Ent2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Ent2</code>
     */
    public static final Ent2 ENT2 = new Ent2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Ent2Record> getRecordType() {
        return Ent2Record.class;
    }

    /**
     * The column <code>Ent2.id</code>.
     */
    public final TableField<Ent2Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Ent2.ent3_id</code>.
     */
    public final TableField<Ent2Record, Integer> ENT3_ID = createField(DSL.name("ent3_id"), SQLDataType.INTEGER, this, "");

    private Ent2(Name alias, Table<Ent2Record> aliased) {
        this(alias, aliased, null);
    }

    private Ent2(Name alias, Table<Ent2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Ent2</code> table reference
     */
    public Ent2(String alias) {
        this(DSL.name(alias), ENT2);
    }

    /**
     * Create an aliased <code>Ent2</code> table reference
     */
    public Ent2(Name alias) {
        this(alias, ENT2);
    }

    /**
     * Create a <code>Ent2</code> table reference
     */
    public Ent2() {
        this(DSL.name("Ent2"), null);
    }

    public <O extends Record> Ent2(Table<O> child, ForeignKey<O, Ent2Record> key) {
        super(child, key, ENT2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<Ent2Record> getPrimaryKey() {
        return Keys.ENT2__;
    }

    @Override
    public Ent2 as(String alias) {
        return new Ent2(DSL.name(alias), this);
    }

    @Override
    public Ent2 as(Name alias) {
        return new Ent2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ent2 rename(String name) {
        return new Ent2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ent2 rename(Name name) {
        return new Ent2(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
