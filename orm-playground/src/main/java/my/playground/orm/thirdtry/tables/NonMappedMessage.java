/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables;


import my.playground.orm.thirdtry.DefaultSchema;
import my.playground.orm.thirdtry.Keys;
import my.playground.orm.thirdtry.tables.records.NonMappedMessageRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class NonMappedMessage extends TableImpl<NonMappedMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>non_mapped_message</code>
     */
    public static final NonMappedMessage NON_MAPPED_MESSAGE = new NonMappedMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NonMappedMessageRecord> getRecordType() {
        return NonMappedMessageRecord.class;
    }

    /**
     * The column <code>non_mapped_message.id</code>.
     */
    public final TableField<NonMappedMessageRecord, byte[]> ID = createField(DSL.name("id"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>non_mapped_message.content</code>.
     */
    public final TableField<NonMappedMessageRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>non_mapped_message.email_id</code>.
     */
    public final TableField<NonMappedMessageRecord, Long> EMAIL_ID = createField(DSL.name("email_id"), SQLDataType.BIGINT, this, "");

    private NonMappedMessage(Name alias, Table<NonMappedMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private NonMappedMessage(Name alias, Table<NonMappedMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>non_mapped_message</code> table reference
     */
    public NonMappedMessage(String alias) {
        this(DSL.name(alias), NON_MAPPED_MESSAGE);
    }

    /**
     * Create an aliased <code>non_mapped_message</code> table reference
     */
    public NonMappedMessage(Name alias) {
        this(alias, NON_MAPPED_MESSAGE);
    }

    /**
     * Create a <code>non_mapped_message</code> table reference
     */
    public NonMappedMessage() {
        this(DSL.name("non_mapped_message"), null);
    }

    public <O extends Record> NonMappedMessage(Table<O> child, ForeignKey<O, NonMappedMessageRecord> key) {
        super(child, key, NON_MAPPED_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<NonMappedMessageRecord> getPrimaryKey() {
        return Keys.NON_MAPPED_MESSAGE__;
    }

    @Override
    public NonMappedMessage as(String alias) {
        return new NonMappedMessage(DSL.name(alias), this);
    }

    @Override
    public NonMappedMessage as(Name alias) {
        return new NonMappedMessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NonMappedMessage rename(String name) {
        return new NonMappedMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NonMappedMessage rename(Name name) {
        return new NonMappedMessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<byte[], String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
