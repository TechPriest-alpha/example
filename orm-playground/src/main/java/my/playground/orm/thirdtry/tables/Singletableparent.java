/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables;


import my.playground.orm.thirdtry.DefaultSchema;
import my.playground.orm.thirdtry.Keys;
import my.playground.orm.thirdtry.tables.records.SingletableparentRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Singletableparent extends TableImpl<SingletableparentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SingleTableParent</code>
     */
    public static final Singletableparent SINGLETABLEPARENT = new Singletableparent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SingletableparentRecord> getRecordType() {
        return SingletableparentRecord.class;
    }

    /**
     * The column <code>SingleTableParent.DTYPE</code>.
     */
    public final TableField<SingletableparentRecord, String> DTYPE = createField(DSL.name("DTYPE"), SQLDataType.VARCHAR(31).nullable(false), this, "");

    /**
     * The column <code>SingleTableParent.id</code>.
     */
    public final TableField<SingletableparentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SingleTableParent.parentData</code>.
     */
    public final TableField<SingletableparentRecord, String> PARENTDATA = createField(DSL.name("parentData"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>SingleTableParent.inheritorValue</code>.
     */
    public final TableField<SingletableparentRecord, String> INHERITORVALUE = createField(DSL.name("inheritorValue"), SQLDataType.VARCHAR(255), this, "");

    private Singletableparent(Name alias, Table<SingletableparentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Singletableparent(Name alias, Table<SingletableparentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SingleTableParent</code> table reference
     */
    public Singletableparent(String alias) {
        this(DSL.name(alias), SINGLETABLEPARENT);
    }

    /**
     * Create an aliased <code>SingleTableParent</code> table reference
     */
    public Singletableparent(Name alias) {
        this(alias, SINGLETABLEPARENT);
    }

    /**
     * Create a <code>SingleTableParent</code> table reference
     */
    public Singletableparent() {
        this(DSL.name("SingleTableParent"), null);
    }

    public <O extends Record> Singletableparent(Table<O> child, ForeignKey<O, SingletableparentRecord> key) {
        super(child, key, SINGLETABLEPARENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SingletableparentRecord> getPrimaryKey() {
        return Keys.SINGLETABLEPARENT__;
    }

    @Override
    public Singletableparent as(String alias) {
        return new Singletableparent(DSL.name(alias), this);
    }

    @Override
    public Singletableparent as(Name alias) {
        return new Singletableparent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Singletableparent rename(String name) {
        return new Singletableparent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Singletableparent rename(Name name) {
        return new Singletableparent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
