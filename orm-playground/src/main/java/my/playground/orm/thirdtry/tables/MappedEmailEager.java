/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables;


import my.playground.orm.thirdtry.DefaultSchema;
import my.playground.orm.thirdtry.Keys;
import my.playground.orm.thirdtry.tables.records.MappedEmailEagerRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MappedEmailEager extends TableImpl<MappedEmailEagerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mapped_email_eager</code>
     */
    public static final MappedEmailEager MAPPED_EMAIL_EAGER = new MappedEmailEager();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MappedEmailEagerRecord> getRecordType() {
        return MappedEmailEagerRecord.class;
    }

    /**
     * The column <code>mapped_email_eager.id</code>.
     */
    public final TableField<MappedEmailEagerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    private MappedEmailEager(Name alias, Table<MappedEmailEagerRecord> aliased) {
        this(alias, aliased, null);
    }

    private MappedEmailEager(Name alias, Table<MappedEmailEagerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mapped_email_eager</code> table reference
     */
    public MappedEmailEager(String alias) {
        this(DSL.name(alias), MAPPED_EMAIL_EAGER);
    }

    /**
     * Create an aliased <code>mapped_email_eager</code> table reference
     */
    public MappedEmailEager(Name alias) {
        this(alias, MAPPED_EMAIL_EAGER);
    }

    /**
     * Create a <code>mapped_email_eager</code> table reference
     */
    public MappedEmailEager() {
        this(DSL.name("mapped_email_eager"), null);
    }

    public <O extends Record> MappedEmailEager(Table<O> child, ForeignKey<O, MappedEmailEagerRecord> key) {
        super(child, key, MAPPED_EMAIL_EAGER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<MappedEmailEagerRecord> getPrimaryKey() {
        return Keys.MAPPED_EMAIL_EAGER__;
    }

    @Override
    public MappedEmailEager as(String alias) {
        return new MappedEmailEager(DSL.name(alias), this);
    }

    @Override
    public MappedEmailEager as(Name alias) {
        return new MappedEmailEager(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MappedEmailEager rename(String name) {
        return new MappedEmailEager(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MappedEmailEager rename(Name name) {
        return new MappedEmailEager(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
