/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables.records;


import my.playground.orm.thirdtry.tables.Singletableparent;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SingletableparentRecord extends UpdatableRecordImpl<SingletableparentRecord> implements Record4<String, Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>SingleTableParent.DTYPE</code>.
     */
    public void setDtype(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>SingleTableParent.DTYPE</code>.
     */
    public String getDtype() {
        return (String) get(0);
    }

    /**
     * Setter for <code>SingleTableParent.id</code>.
     */
    public void setId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>SingleTableParent.id</code>.
     */
    public Long getId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>SingleTableParent.parentData</code>.
     */
    public void setParentdata(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>SingleTableParent.parentData</code>.
     */
    public String getParentdata() {
        return (String) get(2);
    }

    /**
     * Setter for <code>SingleTableParent.inheritorValue</code>.
     */
    public void setInheritorvalue(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>SingleTableParent.inheritorValue</code>.
     */
    public String getInheritorvalue() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, Long, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Singletableparent.SINGLETABLEPARENT.DTYPE;
    }

    @Override
    public Field<Long> field2() {
        return Singletableparent.SINGLETABLEPARENT.ID;
    }

    @Override
    public Field<String> field3() {
        return Singletableparent.SINGLETABLEPARENT.PARENTDATA;
    }

    @Override
    public Field<String> field4() {
        return Singletableparent.SINGLETABLEPARENT.INHERITORVALUE;
    }

    @Override
    public String component1() {
        return getDtype();
    }

    @Override
    public Long component2() {
        return getId();
    }

    @Override
    public String component3() {
        return getParentdata();
    }

    @Override
    public String component4() {
        return getInheritorvalue();
    }

    @Override
    public String value1() {
        return getDtype();
    }

    @Override
    public Long value2() {
        return getId();
    }

    @Override
    public String value3() {
        return getParentdata();
    }

    @Override
    public String value4() {
        return getInheritorvalue();
    }

    @Override
    public SingletableparentRecord value1(String value) {
        setDtype(value);
        return this;
    }

    @Override
    public SingletableparentRecord value2(Long value) {
        setId(value);
        return this;
    }

    @Override
    public SingletableparentRecord value3(String value) {
        setParentdata(value);
        return this;
    }

    @Override
    public SingletableparentRecord value4(String value) {
        setInheritorvalue(value);
        return this;
    }

    @Override
    public SingletableparentRecord values(String value1, Long value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SingletableparentRecord
     */
    public SingletableparentRecord() {
        super(Singletableparent.SINGLETABLEPARENT);
    }

    /**
     * Create a detached, initialised SingletableparentRecord
     */
    public SingletableparentRecord(String dtype, Long id, String parentdata, String inheritorvalue) {
        super(Singletableparent.SINGLETABLEPARENT);

        setDtype(dtype);
        setId(id);
        setParentdata(parentdata);
        setInheritorvalue(inheritorvalue);
    }
}
