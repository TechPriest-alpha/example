/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables;


import my.playground.orm.thirdtry.DefaultSchema;
import my.playground.orm.thirdtry.Keys;
import my.playground.orm.thirdtry.tables.records.MappedMessageContentRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MappedMessageContent extends TableImpl<MappedMessageContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mapped_message_content</code>
     */
    public static final MappedMessageContent MAPPED_MESSAGE_CONTENT = new MappedMessageContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MappedMessageContentRecord> getRecordType() {
        return MappedMessageContentRecord.class;
    }

    /**
     * The column <code>mapped_message_content.content</code>.
     */
    public final TableField<MappedMessageContentRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mapped_message_content.id</code>.
     */
    public final TableField<MappedMessageContentRecord, byte[]> ID = createField(DSL.name("id"), SQLDataType.BLOB.nullable(false), this, "");

    private MappedMessageContent(Name alias, Table<MappedMessageContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private MappedMessageContent(Name alias, Table<MappedMessageContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mapped_message_content</code> table reference
     */
    public MappedMessageContent(String alias) {
        this(DSL.name(alias), MAPPED_MESSAGE_CONTENT);
    }

    /**
     * Create an aliased <code>mapped_message_content</code> table reference
     */
    public MappedMessageContent(Name alias) {
        this(alias, MAPPED_MESSAGE_CONTENT);
    }

    /**
     * Create a <code>mapped_message_content</code> table reference
     */
    public MappedMessageContent() {
        this(DSL.name("mapped_message_content"), null);
    }

    public <O extends Record> MappedMessageContent(Table<O> child, ForeignKey<O, MappedMessageContentRecord> key) {
        super(child, key, MAPPED_MESSAGE_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<MappedMessageContentRecord> getPrimaryKey() {
        return Keys.MAPPED_MESSAGE_CONTENT__;
    }

    @Override
    public MappedMessageContent as(String alias) {
        return new MappedMessageContent(DSL.name(alias), this);
    }

    @Override
    public MappedMessageContent as(Name alias) {
        return new MappedMessageContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MappedMessageContent rename(String name) {
        return new MappedMessageContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MappedMessageContent rename(Name name) {
        return new MappedMessageContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
