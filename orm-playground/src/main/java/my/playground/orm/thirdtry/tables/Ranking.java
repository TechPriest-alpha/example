/*
 * This file is generated by jOOQ.
 */
package my.playground.orm.thirdtry.tables;


import my.playground.orm.thirdtry.DefaultSchema;
import my.playground.orm.thirdtry.Keys;
import my.playground.orm.thirdtry.tables.records.RankingRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Ranking extends TableImpl<RankingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Ranking</code>
     */
    public static final Ranking RANKING = new Ranking();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RankingRecord> getRecordType() {
        return RankingRecord.class;
    }

    /**
     * The column <code>Ranking.id</code>.
     */
    public final TableField<RankingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>Ranking.rank</code>.
     */
    public final TableField<RankingRecord, Integer> RANK = createField(DSL.name("rank"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Ranking.observer_id</code>.
     */
    public final TableField<RankingRecord, Long> OBSERVER_ID = createField(DSL.name("observer_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>Ranking.skill_id</code>.
     */
    public final TableField<RankingRecord, Long> SKILL_ID = createField(DSL.name("skill_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>Ranking.subject_id</code>.
     */
    public final TableField<RankingRecord, Long> SUBJECT_ID = createField(DSL.name("subject_id"), SQLDataType.BIGINT, this, "");

    private Ranking(Name alias, Table<RankingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ranking(Name alias, Table<RankingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Ranking</code> table reference
     */
    public Ranking(String alias) {
        this(DSL.name(alias), RANKING);
    }

    /**
     * Create an aliased <code>Ranking</code> table reference
     */
    public Ranking(Name alias) {
        this(alias, RANKING);
    }

    /**
     * Create a <code>Ranking</code> table reference
     */
    public Ranking() {
        this(DSL.name("Ranking"), null);
    }

    public <O extends Record> Ranking(Table<O> child, ForeignKey<O, RankingRecord> key) {
        super(child, key, RANKING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RankingRecord> getPrimaryKey() {
        return Keys.RANKING__;
    }

    @Override
    public Ranking as(String alias) {
        return new Ranking(DSL.name(alias), this);
    }

    @Override
    public Ranking as(Name alias) {
        return new Ranking(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ranking rename(String name) {
        return new Ranking(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ranking rename(Name name) {
        return new Ranking(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, Long, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
